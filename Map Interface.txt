

 Map<String, Integer> map = new HashMap<>();
        map.put("b", 10);
        map.put("z", 5);
        map.put("a", 20);
        map.put("d", 2330);
        map.put("t", 2330);
        map.put("p", 230);
        System.out.println("!!!!!!!!!!!!!!!!! " + map);

        Map<String, Integer> synchronizedMap = Collections.synchronizedMap(map);

        System.out.println("!!!!!!!!!!!!!!!!! synchronizedMap " + synchronizedMap);

        Map<String, Integer> sortedMap = synchronizedMap.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey()) // it return key data by asc
                // for descending order .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))
                .filter(entry-> entry.getValue()>200) // it return the value are above 200
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (x, y) -> y, LinkedHashMap::new)); // it returns map in LinkedMap for insertion orede

        System.out.println("!!!!!!!!!!!!!!!!! sorted " + sortedMap);

        System.out.println("!!!!!!!!!!!!!!!!! map hash  " + map.hashCode());
        System.out.println("!!!!!!!!!!!!!!!!! sync hash  " + synchronizedMap.hashCode());
        System.out.println("!!!!!!!!!!!!!!!!! stream hash  " + sortedMap.hashCode());



        o\p == 
                 !!!!!!!!!!!!!!!!! {p=230, a=20, b=10, d=2330, t=2330, z=5}
                 !!!!!!!!!!!!!!!!! synchronizedMap {p=230, a=20, b=10, d=2330, t=2330, z=5}
                 !!!!!!!!!!!!!!!!! sorted {d=2330, p=230, t=2330}
                 !!!!!!!!!!!!!!!!! map hash  5342
                 !!!!!!!!!!!!!!!!! sync hash  5342
                 !!!!!!!!!!!!!!!!! stream hash  4994




/////////////////////////////////////////////////////////////////


           TREE MAP 
 
   // for desecnding key in map 
  NavigableMap<String, Integer> map = new TreeMap<>();
        map.put("b", 10);
        map.put("z", 5);
        map.put("a", 20);
        map.put("d", 2330);
        map.put("t", 2330);
        map.put("p", 230);
        
        
        NavigableSet<String> s = map.descendingKeySet();

// descending map 

  Map<String, Integer> map = new TreeMap<>();
        map.put("b", 10);
        map.put("a", 20);
        map.put("c", 30);
        map.put("d", 40);

        NavigableMap<String, Integer> descendingMap = map.descendingMap();

        System.out.println("Original map: " + map);
        System.out.println("Descending map: " + descendingMap);


  o/p =   Original map: {a=20, b=10, c=30, d=40}
         Descending map: {d=40, c=30, b=10, a=20}







